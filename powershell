Set-ItemProperty "REGISTRY::HKLM\Software\Policies\Microsoft\Windows\WindowsUpdate\AU" UseWUserver -value 0
Get-Service wuauserv | Restart-Service
Get-WindowsCapability -Online -Name RSAT*  | Add-WindowsCapability -Online
Set-ItemProperty "REGISTRY::HKLM\Software\Policies\Microsoft\Windows\WindowsUpdate\AU" UseWUserver -value 1


$session = New-PSSession -ComputerName DC -Credential (Get-Credential)
Invoke-Command $session -Scriptblock { Import-Module ActiveDirectory }
Import-PSSession -Session $session
Get-ADUser Administrator
Get-PSSession | Remove-PSSession



#### SET Static IP %%%%%
New-NetIPAddress –InterfaceAlias “Wired Ethernet Connection” –IPv4Address “192.168.0.1” –PrefixLength 24 -DefaultGateway 192.168.0.254
New-NetIPAddress –IPAddress 192.168.1.13 -DefaultGateway 192.168.1.1 -PrefixLength 24 -InterfaceIndex (Get-NetAdapter).InterfaceIndexs
Set-DnsClientServerAddress -InterfaceAlias “Wired Ethernet Connection” -ServerAddresses 192.168.0.1, 192.168.0.2
Set-DNSClientServerAddress –InterfaceIndex (Get-NetAdapter).InterfaceIndex –ServerAddresses <ip1>,<ip2>, etc.
% DYnamic $$
Set-NetIPInterface -InterfaceAlias 'Ethernet 2' -Dhcp Enabled
Get-NetIPAddress -InterfaceAlias 'Ethernet 2' | Remove-NetRoute
####
Get-Content C:\IP_Address.txt | ForEach-Object {([system.net.dns]::GetHostByAddress($_)).hostname >> c:\hostname.txt}
Get-Content C:\IP_Address.txt | ForEach-Object {([system.net.dns]::GetHostByAddress($_)).hostname >> c:\hostname.txt}

#sprawdzanie nazwy hosta by ip
Resolve-DnsName 192.168.0.186
[system.net.dns]::gethostentry('192.168.1.50')

$o = New-PSSessionOption -SkipCACheck  -SkipCNCheck 
Enter-PSSession -ComputerName 'Marek' -Credential $cred -Authentication basic -UseSSL -SessionOption $o
net use w: \\marek\wsb /user:marek\marek secredpasssword  /P:Yes
New-PSDrive -Name "Y" -PSProvider FileSystem -Root "\\marek\wsb\st\" -Credential $cred
New-PSDrive -Name "X" -PSProvider FileSystem -Root "\\xp-komputer\c$\dr" -Credential $cred 


Get-Item -Path X: | Copy-Item -Path {$_.FullName} -Destination o: -Recurse -Force
pnputil.exe -a c:\dr\*.inf  


$Servers = Get-Content c:\server_list.txt
foreach($Server in $Servers)
 {
 Write-Host "Procesing Server $Serer"
 Get-WinObject -Class Win32_Product -ComputerName $Server | select __SERVER, Name, Version -ErrorAction SilentluContinue
 }
 


##get all installed app
Get-ItemProperty HKLM:\Software\Wow6432Node\Microsoft\Windows\CurrentVersion\Uninstall\* | Select-Object DisplayName, DisplayVersion, Publisher, InstallDate | Format-Table –AutoSize
znajdowanie ruznic
Compare-Object -ReferenceObject (Get-Content C:\Users\Lori\Documents\PCapps.txt) -DifferenceObject (Get-Content C:\Users\Lori\Documents\LAPTOPapps.txt)
##


#lista share folder
get-WmiObject -class Win32_Share
#okno z poswiadczeniami
$cred = Get-Credential
#dir powershell
Get-ChildItem -Directory
Get-ChildItem -Attributes {Directory} #w10 1903 nie dziala
#werja powershell
$PSVersionTable
#usuniecie pakietu dla wszystkich userow
Get-AppxPackage -all Microsoft.MicrosoftStickyNotes | Remove-AppxPackage -AllUsers #nie dziala
##niby dzial
Get-AppxPackage  Microsoft.WindowsM* -AllUsers |  Remove-AppxPackage   
#lista wszystkich zainstalowanych programow
Get-ItemProperty HKLM:\Software\Wow6432Node\Microsoft\Windows\CurrentVersion\Uninstall\* | Select-Object DisplayName, DisplayVersion, Publisher, InstallDate | Format-Table -AutoSize
#siecowe
Get-NetRoute -DestinationPrefix "0.0.0.0/0"
Stop-Computer -Force -ComputerName komputer.LOCAL
Restart-Computer -Force -ComputerName komputer.LOCAL
#sprawdzenie dostepu zdalnego powershell
Get-ChildItem WSMan:\localhost\Service\Auth
Set-Item -Path "WSMan:\localhost\Service\Auth\Basic" -Value $false
winrm enumerate winrm/config/Listener
Status-Service winrm
https://github.com/PowerShell/WindowsCompatibility
https://github.com/devops-collective-inc/secrets-of-powershell-remoting/tree/master/manuscript


([adsi]"WinNT://$((Get-WMIObject Win32_ComputerSystem).Domain)").Children).Where({$_.schemaclassname -eq 'computer'})

+ Get-ADComputer -Filter * -properties *|select Name, DNSHostName, OperatingSystem, LastLogonDate
Invoke-Command -ComputerName name {Get-ADComputer -Filter * -properties *|select DNSHostName }|Export-Csv d:\mz2.csv
Invoke-Command -ComputerName name {Stop-Computer -Force -ThrottleLimit 1 }
Invoke-Command -ComputerName Marek -ScriptBlock {ipconfig /all} -Credential $cred
 winrm e winrm/config/listener
##########################
# Store the appropriate Linux credential as an object
$cred = Get-Credential

# Disable cert checking (this is a dev/test environment)
$o = New-PSSessionOption -SkipCACheck  -SkipCNCheck
##update ps7 
Invoke-Expression "& {$(Invoke-RestMethod -Uri https://aka.ms/install-powershell.ps1)} -UseMSI -Preview -Quiet"

# Start the session, specifying our custom remoting configuration
Enter-PSSession -ComputerName 'marek' -Credential $cred -Authentication basic -UseSSL -SessionOption $o

############################################
####  Dodawanie Drukarki lokalnie ##########
############################################
It turns out that the driver from the INF file can only be installed if it already exists in the DriverStore. It appears that you can’t install a print driver that is not in the Driver Store using Add-PrinterDriver command. To add a driver to the DriverStore, you can use:

the VBS script described in the previous article;
the utility — pnputil.exe. The command can looks as follow: pnputil.exe -i -a C:\Distr\HP-pcl6-x64\hpcu118u.inf (installs the specific printer driver) or pnputil.exe -i -a C:\Distr\HP-pcl6-x64\*.inf (installs all the drivers found in the INF files in the specified directory);
You can download and unpack the necessary driver files manually or export all third-party drivers from a reference Windows 10 computer, on which all the necessary drivers are already installed (using the Export-WindowsDriver cmdlet).
If your Windows 10 ISO image contains only the file ..\sources\install.esd, you can convert the ESD file to WIM format using the DISM tool: dism /export-image /SourceImageFile:"C:\WinWork\ISO\install.esd" /SourceIndex:4 /DestinationImageFile:C:\WinWork\ISO\install.wim /Compress:max /CheckIntegrity
List all Windows editions contained in the Install.wim file using the Get-WindowsImage PowerShell cmdlet. This is necessary in order to specify the Widows edition into which it is planned to integrate the additional drivers.

Get-WindowsImage -ImagePath C:\WinWork\ISO\install.wim
In our example, the WIM file contains only one Windows 10 Pro edition with the index 1 (ImageIndex: 1).
Next you need to mount the image of the selected Windows edition in the directory Mount. The Windows image index, which you need to mount, must be specified as an argument of the Index parameter:

Mount-WindowsImage -Path C:\WinWork\Mount\ -ImagePath C:\WinWork\ISO\install.wim -Index 1

fter the image is mounted, you can add drivers to it from the Drivers directory using the command:

Add-WindowsDriver -Path C:\WinWork\Mount\ -Driver C:\WinWork\Drivers -Recurse

The Add-WindowsDriver cmdlet will recursively search (the -Recurse parameter) the specified folder for all *.inf files with driver description. According to the description in the inf file, the cmdlet will add the dependent INF, DLL, CAT, PNF, etc. files to the Driver Store of your Windows image.
Using the –ForceUnsigned key, you can add to the driver store even an unsigned drivers. Otherwise, you will have to disable the digital signature enforcement or sign the device driver yourself with a self-signed certificate.
So, the drivers are copied, and the current image can be unmounted with saving changes:

Dismount-WindowsImage -Path C:\WinWork\Mount\ –Save
###genetelnie szukaj tu 
http://woshub.com/integrate-drivers-to-windows-install-media/
###
Get-WindowsDriver -All -Online | Where-Object {$_.OriginalFileName -like '*kobk4aa_.inf'} | Select-Object -ExpandProperty OriginalFileName -OutVariable infPath
C:\Windows\System32\DriverStore\FileRepository\kobk4aa_.inf_amd64_4e2ed49703e52a01\kobk4aa_.inf

Get-Command –Module PrintManagement
Get-Help <cmdlet_name> -Detailed
Get-Help < cmdlet_name> -Examples
Get-Help Add-PrinterDriver -Examples
Add-PrinterPort -Name bogus: -PrinterHostAddress 192.168.0.31
Get-PrinterPort | Where name -eq ‘bogus:’ | Remove-PrinterPort



dism /online /Import-DefaultAppAssociations:"%UserProfile%\Desktop\FileAssociations.xml"
Dism.exe /Online /Remove-DefaultAppAssociations
dism /online /Export-DefaultAppAssociations:"%UserProfile%\Desktop\FileAssociations.xml"

